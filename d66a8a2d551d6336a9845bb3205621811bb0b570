{
  "comments": [
    {
      "key": {
        "uuid": "da6255ed_9219027c",
        "filename": "src/main/java/org/lizardirc/beancounter/security/AccessControl.java",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1
      },
      "writtenOn": "2015-09-15T10:53:05Z",
      "side": 1,
      "message": "Not sure if this is \"correct\" code, feedback here would be appreciated.",
      "revId": "d66a8a2d551d6336a9845bb3205621811bb0b570",
      "serverId": "cf5d0eaf-4814-484b-b55f-41cd7f22928e",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da6255ed_522b8a82",
        "filename": "src/main/java/org/lizardirc/beancounter/security/AccessControl.java",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-09-16T02:54:28Z",
      "side": 1,
      "message": "I don\u0027t see why we need to register permissions at all. It\u0027s also probably bad form to specify a field in the interface.\n\nPer discussion in Teamspeak, maybe make the permissions more advisory?",
      "parentUuid": "da6255ed_9219027c",
      "revId": "d66a8a2d551d6336a9845bb3205621811bb0b570",
      "serverId": "cf5d0eaf-4814-484b-b55f-41cd7f22928e",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da6255ed_f2395ed9",
        "filename": "src/main/java/org/lizardirc/beancounter/security/BreadBasedAccessControl.java",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-09-16T02:54:28Z",
      "side": 1,
      "message": "Maybe implement a multimap clone utility method to build fresh HashSets right away?\n\nreturn new HashMap\u003c\u003e(multimap.entrySet().stream()\n    .collect(Collectors.toMap(\n        Map.Entry::getKey,\n        e -\u003e new HashSet\u003c\u003e(e.getValue())));",
      "revId": "d66a8a2d551d6336a9845bb3205621811bb0b570",
      "serverId": "cf5d0eaf-4814-484b-b55f-41cd7f22928e",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da6255ed_3220169b",
        "filename": "src/main/java/org/lizardirc/beancounter/security/BreadBasedAccessControl.java",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-09-16T02:54:28Z",
      "side": 1,
      "message": "I\u0027m thinking this could be done a lot more concisely using the streams API.\n\nboolean hasPerm \u003d hostmasksToRoles.entrySet().stream()\n    .filter(e -\u003e userHostmask.matches(e.getKey()))\n    .map(Map.Entry::getValue)\n    .distinct()\n    .anyMatch(role -\u003e \"*\".equals(role) || rolesToPermissions.get(role).stream()\n        .anyMatch(perm -\u003e \"*\".equals(perm) || checkPermission.equals(perm)));\n\nYou could probably clean it up even further by adding \"*\" -\u003e \"*\" in the rolesToPermissions on load, so you only need to special case once.",
      "revId": "d66a8a2d551d6336a9845bb3205621811bb0b570",
      "serverId": "cf5d0eaf-4814-484b-b55f-41cd7f22928e",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da6255ed_122512ab",
        "filename": "src/main/java/org/lizardirc/beancounter/security/BreadBasedAccessControl.java",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-09-16T02:54:28Z",
      "side": 1,
      "message": "Similar rewriting possible for this. Could refactor hasPermission to make use of this, or better, refactor them both to make use of a private Stream\u003cString\u003e getPermissions.",
      "revId": "d66a8a2d551d6336a9845bb3205621811bb0b570",
      "serverId": "cf5d0eaf-4814-484b-b55f-41cd7f22928e",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da6255ed_d2365ae7",
        "filename": "src/main/java/org/lizardirc/beancounter/security/BreadBasedAccessControl.java",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-09-16T02:54:28Z",
      "side": 1,
      "message": "You could extract a method addToMultimap(Map\u003cString, Set\u003cString\u003e\u003e multimap, String key, String value) here.",
      "revId": "d66a8a2d551d6336a9845bb3205621811bb0b570",
      "serverId": "cf5d0eaf-4814-484b-b55f-41cd7f22928e",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da6255ed_b233e6f5",
        "filename": "src/main/java/org/lizardirc/beancounter/security/BreadBasedAccessControl.java",
        "patchSetId": 2
      },
      "lineNbr": 188,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-09-16T02:54:28Z",
      "side": 1,
      "message": "And then make use of addToMultimap here again.",
      "revId": "d66a8a2d551d6336a9845bb3205621811bb0b570",
      "serverId": "cf5d0eaf-4814-484b-b55f-41cd7f22928e",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da6255ed_9230e2e9",
        "filename": "src/main/java/org/lizardirc/beancounter/security/BreadBasedAccessControl.java",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-09-16T02:54:28Z",
      "side": 1,
      "message": "noSync is confusingly named on the principle of \"introduce as few negations as possible\". Maybe just call it \"sync\" and invert the semantics?",
      "revId": "d66a8a2d551d6336a9845bb3205621811bb0b570",
      "serverId": "cf5d0eaf-4814-484b-b55f-41cd7f22928e",
      "unresolved": false
    }
  ]
}