{
  "comments": [
    {
      "key": {
        "uuid": "da6255ed_cf78f12d",
        "filename": "src/main/java/org/lizardirc/beancounter/ChannelPersistor.java",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-09-12T16:05:41Z",
      "side": 1,
      "message": "Technically we should synchronize this as well, since forEach isn\u0027t guaranteed to behave normally when the set is modified; many implementations will fail-fast and emit a ConcurrentModificationException on a best-effort basis.",
      "revId": "0e70afac7c21cdde70625b7be2d3a08d1c8365aa",
      "serverId": "cf5d0eaf-4814-484b-b55f-41cd7f22928e",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da6255ed_ef7bb527",
        "filename": "src/main/java/org/lizardirc/beancounter/ChannelPersistor.java",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-09-12T16:05:41Z",
      "side": 1,
      "message": "Maybe better to synchronize the PersistenceManager and make it part of the contract that PersistenceManagers are threadsafe? Since multiple objects/threads will have access to it at once, external thread safety on a pm seems difficult. Properties is already threadsafe, so for PropertiesPersistenceManager you\u0027d only need to synchronize the PropertiesWrapper\u0027s methods that touch files or the dirty map.",
      "revId": "0e70afac7c21cdde70625b7be2d3a08d1c8365aa",
      "serverId": "cf5d0eaf-4814-484b-b55f-41cd7f22928e",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da6255ed_af75bd33",
        "filename": "src/main/java/org/lizardirc/beancounter/SlapListener.java",
        "patchSetId": 3
      },
      "lineNbr": 187,
      "author": {
        "id": 5
      },
      "writtenOn": "2015-09-12T16:05:41Z",
      "side": 1,
      "message": "Ditto here. If we make pm threadsafe, this shouldn\u0027t need to be synchronized.",
      "revId": "0e70afac7c21cdde70625b7be2d3a08d1c8365aa",
      "serverId": "cf5d0eaf-4814-484b-b55f-41cd7f22928e",
      "unresolved": false
    }
  ]
}