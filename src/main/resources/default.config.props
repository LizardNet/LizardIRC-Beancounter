# Beancounter configuration properties file
# Please read this file carefully and modify as appropriate, as it controls the startup parameters of your bot.
# Unless otherwise noted, all properties expect a single string value.

# REQUIRED SETTINGS
# You must specify these values, or the bot will explode on you at startup.

# serverHost: String - Hostname of the IRC server to connect to.
serverHost=

# OPTIONAL SETTINGS
# If these values are not specified, hardcoded defaults (shown below) will be used instead.
# Remember to uncomment the values if you wish to change them!

# botName: String - Nickname the bot should attempt to use. Defaults to Beancounter.
#botName=Beancounter

# botUsername: String - The username (nick!username@host) the bot should use. Defaults to beancounter.
#botUsername=beancounter

# useTls: Boolean - Set this to true if the bot should attempt to use an encrypted IRC connection (default)
#useTls=true

# verifyHostname: Boolean - Only effective if useTls is true. If verifyHostname is true (default), verify that the
# name of the server on the presented certificate matches the serverHost property above.  Bot will abort connection if
# the verification fails. IMPORTANT: This property does NOT control Java's own built-in certificate validation routines!
#verifyHostname=true

# allowedCertificates: String - Only effective if useTls is true. Set allowedCertificates to the hexadecimal MD5, SHA1,
# SHA256, or SHA512 fingerprint of the certificate(s) you want to allow - non-matching certs will cause the bot to
# abort connecting. Specify multiple fingerprints by separating then with commas. Leave blank to not perform this
# certificate pinning (default).
#allowedCertificates=

# serverPort: Integer - Set this to the port the bot should use to connect to the IRC server. The default value depends
# on the setting of useTls. If useTls is true, serverPort defaults to 6697; otherwise it defaults to 6667.
#serverPort=

# autoModes: String - The single-character mode flags the bot should attempt to set on itself after connecting. You can
# mix additions and removals by using the standard format (e.g., "-ix+wB"). If blank (default), the bot will not
# attempt to change its usermodes on connect.
#autoModes=

# autoJoinChannels: String - Set this to a list of comma-separated channels the bot should always join on startup. By
# default, will not attempt to join any channels.
#autoJoinChannels=

# autoReconnect: Boolean - If this is set to true (the default), the bot will automatically attempt to reconnect to
# the server if it is disconnected by any other means than a "quit" command from an authorized user on IRC. Set this to
# false to disable this behavior.
#autoReconnect=true

# ownerHostmask: String - Set this to the hostmask of the bot's owner (i.e., a user identifier in nick!user@host form).
# Note that this hostmask will be interpreted as a regular expression.  Anyone who has a hostmask matching this one will
# always be granted all permissions in the bot, so choose wisely. If left blank (which is the default), the bot will
# fall back to a restrictive mode that allows *no one* to do *anything* - this is almost certainly NOT what you want!
# (Note that restrictive mode will only be entered if this ownerHostmask value is blank *and* no permissions have been
# assigned from IRC using the "acl" command - but remember, in restrictive mode, you won't be able to use the "acl"
# command to add any access list entries!).
#ownerHostmask=

# fantasyString: String - Set this to the character (or string of characters) that will be expected to prefix commands
# sent to an IRC channel. Commands sent to your Beancounter in a private message don't need to be prefixed. If left
# blank, defaults to "?". There is no restriction on the length of the fantasyString, but a single character is
# recommended. Example: If fantasyString is set to "?" and you want to call the "slap" command in a channel, you would
# say "?slap" in the channel. Note: If you want to use "=" as your fantasyString, escape it with a single backslash.
#fantasyString=?

# separator: String - Set this to the character (or string of characters) that can be used to separate chainable
# bot commands. Chainable bot commands are bot commands that can be called on a single line instead of being sent on
# their own lines; for example, if separator is set to ";" (the default), one could say this in an IRC channel to call
# the "slap", "roulette", and "poulette" commands in order: "?slap; ?roulette; ?poulette". There is no restriction on
# the length of the separator, but a single character is strongly recommended.
#separator=;

# OPTIONAL SASL AUTHENTICATION CONFIGURATION
# These values control whether the bot should attempt SASL authentication to an IRC network's services (usually either
# NickServ or AuthServ). Both values are optional; however, both must be provided for the bot to attempt authentication.
# Consult your IRC network's documentation if you aren't sure what to put here.

# sasl.username: String - Usually the username of the NickServ/AuthServ account to attempt authentication as
#sasl.username=

# sasl.password: String - Usually the password of the NickServ/AuthServ account to attempt authentication as
#sasl.password=

# OPTIONAL BEANLEDGER CONFIGURATION
# The Beanledger is used to contain the bot's state information; for example, custom items for the slap command and
# channels the bot has been invited to join and which it should attempt to join again on connect. If any of these values
# aren't specified, the defaults (indicated below) will be used instead. You may wish to use this Beanledger
# configuration if you run multiple Beancounters (for instance, so you can have a separate Beanledger for each network
# you have a Beancounter for).

# beanledger.backend: String - The storage backend to use for your Beanledger. Currently, only the values "flatfile"
# and "redis" are supported. Defaults to "flatfile". Selecting an unsupported backend will cause the bot to explode violently.
#beanledger.backend=flatfile

# beanledger.flatfile.path: String - If using the "flatfile" Beanledger backend, what file should it use? Relative paths
# are interpreted as relative to the Beancounter jarfile. Using the ".props" file extension is recommended. Defaults to
# the value "beanledger.props".
#beanledger.flatfile.path=beanledger.props

# beanledger.redis.host: String - The host to contact if using the "redis" Beanledger backend. Defaults to "localhost".
#beanledger.redis.host=localhost

# beanledger.redis.port: int - The port on which to contact the redis server. Defaults to 6379.
#beanledger.redis.port=6379

# beanledger.redis.namespace: String - The namespace under which to place all redis configuration. This is used to
# prevent collisions in shared redis instances. No namespace is used if this field is not provided.
#beanledger.redis.namespace=

# OPTIONAL WEATHER CONFIGURATION
# Beancounter is capable of providing weather information sourced from Weather Underground
# <https://www.weatherunderground.com>.  To enable this, you will need to purchase an API key from WeatherUnderground
# and configure it into your bot using the ?cfgweather command after enabling the WeatherHandler here (a free API
# service tier is available from WeatherUnderground).

# weather.enable: Boolean - Whether to enable the weather handler.  Disabled by default (set to false).  Set this to
# true to enable.  Note that after enabling the weather handler, you will need to use the ?cfgweather command to provide
# your WeatherUnderground API key as well as configure ratelimiting.  Note that the weather command can also be disabled
# from IRC if necessary.  See the Beancounter documentation at <https://www.lizardirc.org/?page=beancounter> for more
# information.
#weather.enable=false
